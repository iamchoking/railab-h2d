%% Initialize
clear

%% Basic Geometry
syms r1m r1p r1d r2m rxp rxd ryp
syms l1 l2 l3

syms lead1 lead2
syms eff1  eff2

%% Kinematic Variables / Equations
disp("[EQN ] Setting Governing Equations...")

syms a1 a2 % a (alpha): motor positions (angle)

syms q1 q2 delx dely % q: actuated deflections / del: passive (spring-load) deflections

syms th1 th2 th3

syms x y theta

% Additional Symbols (for convenience)
a = [a1;a2];
q = [q1;q2];

th = [th1;th2;th3];
s1   = sin(th(1));
s12  = sin(th(1)+th(2));
s123 = sin(th(1)+th(2)+th(3));
c1   = cos(th(1));
c12  = cos(th(1)+th(2));
c123 = cos(th(1)+th(2)+th(3));

pos = [x,y,theta];

% assume(th1 >= 0 & th1 <= deg2rad(90) );
% assume(th2 >= 0 & th2 <= deg2rad(110));
% assume(th3 >= 0 & th3 <= deg2rad(90) );

% string equations (step 1)
string_eqns = [q1 == -(r1m*th1)+r1p*th2+r1d*th3,q2 == r2m*th1,delx == -rxp*th2 + rxd*th3];

% 3link equations (step 2)
tlink_eqns = [x == l1*s1+l2*s12+l3*s123, y == l1*c1+l2*c12+l3*c123, theta == pi/2-(th(1)+th(2)+th(3))];
tlink_eqns_pos = tlink_eqns(1:2);

disp("[EQN ] Done.")

%% Forward Kinematics Step 0 (a -> q)

forw0_a_q = [2*pi/lead1*a1;2*pi/lead2*a2];

%% Forward Kinematics Step 1 (q (&del) -> th)
disp("[FORW] Solving Forward Kinematics...")

forw1_sol = solve(string_eqns,[th1 th2 th3]);
forw1_q_th = [forw1_sol.th1;forw1_sol.th2;forw1_sol.th3];

forw1_D = [simplify(subs(forw1_q_th,{q1,q2,delx},{1,0,0})) simplify(subs(forw1_q_th,{q1,q2,delx},{0,1,0}))];
forw1_A = [simplify(subs(forw1_q_th,{q1,q2,delx},{0,0,1}))];
if (min(isAlways(forw1_D*[q1;q2]+forw1_A*delx==forw1_q_th)) == 0)
    disp("[FORW][WARN] forw1_D and forw1_A is not closed!")
end

forw_kin = @(q,del) subs(forw1_D*[q1;q2]+forw1_A*del,{q1,q2,delx},{q(1),q(2),del});

% forw_kin([1 0],0)

%% Forward Kinematics Step 2 (th -> ee position)

% start with th1,th2,th3 -> get x y theta
forw2_sol = solve(tlink_eqns,[x y theta]);

forw2_th_pos = [forw2_sol.x;forw2_sol.y;forw2_sol.theta];


% (unsolvable)
% kin_eqs = [x == forw_q_pos(1),y == forw_q_pos(2)]
% inv_kin_full = solve(kin_eqs,[q1 q2])

%% Full Forward Kinematics (q (, del) / a -> position)
forw_q_pos = subs(forw2_th_pos,th,forw1_q_th);
forw_a_pos = subs(forw_q_pos,q,forw0_a_q);

disp("[FORW] Done.")

%% Inverse Kinematics 0 (q -> a)

disp("[INV ] Solving Inverse Kinematics...")

inv0_q_a1 = lead1/(2*pi) * q1;
inv0_q_a2 = lead2/(2*pi) * q2;

%% Inverse Kinematics 1A (th1 th2 del-> q th3)

inv1a_sol = solve(string_eqns,[q1 q2 th3]);
inv1a_q1 = inv1a_sol.q1;
inv1a_q2 = inv1a_sol.q2;
inv1a_th3 = inv1a_sol.th3;


%% Inverse Kinematics 1B (th1 th2 th3-> q delx)

inv1b_sol = solve(string_eqns,[q1 q2 delx]);
inv1b_q1 = inv1b_sol.q1;
inv1b_q2 = inv1b_sol.q2;
inv1b_delx = inv1b_sol.delx;

%% Inverse Kinematics 2A (x y -> th1 th2 (assume delx = 0))

% Cannot be done symbolically
% subs(string_eqns(3),delx,0);
% 
% lb_hybrid_eqns = [subs(string_eqns(3),delx,0),tlink_eqns_pos]
% 
% inv2a_sol = solve(tlink_eqns,[th1 th2],'ReturnConditions',true)
% disp(inv2a_sol.conditions)

%% Inverse Kinematics 2B (x y theta -> th1 th2 th3)

% Cannot be done symbolically
% inv2b_sol = solve(tlink_eqns,[th1 th2 th3])

%% Full Inverse Kinematics (TODO)

disp("[INV ] Done.*")


%% Differential Kinematics 0 (adot -> qdot)

J_a_q = 2*pi*[1/lead1 0;0 1/lead2]; %(thdot = J_q_th * qdot)
J_a_q_with_eff = forw1_D; %effeciency multiplied for force calculations

disp("[DIFF] Solving Differential Kinematics...")

%% Differential Kinematics 1 (qdot -> thdot)

J_q_th = forw1_D; %(thdot = J_q_th * qdot)

%% Differential Kinematics 2 (thdot -> v(xdot,ydot,thdot) )

J_th_v = [
      l1*c1+l2*c12+l3*c123      l2*c12+l3*c123    l3*c123;
    -(l1*s1+l2*s12+l3*s123)   -(l2*s12+l3*s123) -(l3*s123);
    -1                        -1                -1
    ];


%% Differential Kinematics Combine (adot/qdot -> v (xdot,ydot))

J_fing = J_th_v(1:2,:) * J_q_th; % (qdot -> v (xdot,ydot))
J_full_sym = eye(2,2)*J_fing; % TODO (adot -> v (xdot,ydot))

disp("[DIFF] Done.")
